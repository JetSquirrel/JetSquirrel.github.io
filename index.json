[{"categories":null,"contents":"这是我的第一份周报，时间范围是 2022-6-20 到 2022-6-26，会记录工作 / 学习 / 生活上的事情。\n💻工作 / 代码 / 计算机\rfluent-operator 的 Fluentd Loki 插件开发\r这周我又接下了开源项目 fluent-operator 的 Fluentd Loki 插件开发 issue，本以为有了上次提交 OpenSearch 插件经验会完成的更加顺畅，今天上手后才发现还是有很多问题需要进行解决，这对我来说会是一个很大的挑战。\nGolang 代码规范\r周五学习了 Golang 的代码规范，发现平时自己在写 Golang 的时候有些地方不符合规范，以后得多多留意。另外，我发现关注的开源项目 fluent-operator 和 siyuan-note 中，有些代码不符合 Golang 规范，以后可以在这些地方水一水 PR。\n✍️学习\r读书\r这周读了三本书：\nGoogle SRE 运维解密：讲解 SRE 这个工作岗位的由来以及在 Google 中的实践经验，目前看到了第六章 「分布式系统的监控」 教堂与集市：讲解开源文化，目前看到了第二章「教堂与集市」 Build Your Second Brain：由于是全英文，目前只看了 Introduction，但是通过相关解读这本书的中文博客和视频学习到了「P.A.R.A」知识管理方法 我的阅读软件采用了「思源笔记」，双链标注 PDF 的方式是真的好用，非常适合整理读书笔记 P.A.R.A\rP.A.R.A 是 Tiago Forte 发明的项目管理方法，其中\n项目（Project）：具有明确目标以及时间范围，是最小执行单位 领域（Area）：长期需要关注的领域（带责任） 资源（Resource）：感兴趣的事情（非责任） 归档（Archive）：沉寂的内容，但也许对未来有用 笔记工具采用的是「思源笔记」，目前已经将以前的笔记转化为 P.A.R.A 方式。 🍚生活\r开始运动\r这周开始在家运动，主要是跟着 B 站上的视频训练，主要运动内容是：\n卡波耶拉基础 核心力量训练 以前很少运动，工作后的保持良好的运动习惯。「每天运动半小时，健康工作五十年」 离开家 / 到达深圳\r由于工作原因，我离开成都到了深圳。到外地工作打乱了我最初的安排，对于离开离开小秋和爸妈也非常不舍，但这是我综合各方面后最好的选择， 到深圳后，这几天一直在看房，今天终于定下来了。这边防疫政策严格，每天都得捅喉咙做核酸，保证有24小时核酸码。另外，果然如网上所属，有着深圳有好多湘菜馆、隆江猪脚饭。\n入职鹅厂 / 生日\r这周五正式入职鹅厂🐧，同时，入职这天也刚好是我的生日。选择入职日期并没有没有刻意安排，事后才发觉。这我而言也是一个非常重要的「仪式」吧，即意味着我长大了一岁，也表示我身上的责任更多了。 刚入职的工作主要是安装办公环境、看文档、熟悉产品，新同事非常 Nice，晚饭过后同事给我生日，还吃到 mentor 订的生日蛋糕，非常感谢大家。\nMac 真香\r用上了公司发的 Mac，苹果的用户体验果然名不虚传，用来开发和写文档非常舒服，由于是第一次使用还在适应中。 上一台电脑是 Surface，我用它上面写论文、写笔记、看视频、绘图、玩游戏、跑深度强化学习，终于，现在它不用再承受它不该承受的负担了。\nAuthor: JetSquirrel LastMod: 2022-06-27 License CC BY-NC-ND 4.0 本文格式参考了 STRRL\n","date":"Jun 27","permalink":"/post/2022-06-4th-week/","tags":null,"title":"2022年6月第四周"},{"categories":null,"contents":"在 Informer开始运行时，Reflector 对象的 store 字段被设置为了 DeltaFIFO 队列对象\nDeltaFIFO的结构定义的源代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 type DeltaFIFO struct { // lock/cond protects access to \u0026#39;items\u0026#39; and \u0026#39;queue\u0026#39;. lock sync.RWMutex cond sync.Cond // We depend on the property that items in the set are in // the queue and vice versa, and that all Deltas in this // map have at least one Delta. items map[string]Deltas queue []string // a lot of code here } DeltaFIFO可以本\n可以看到 \u0026ldquo;DeltaFIFO\u0026rdquo;可以拆分开分为两个部分来理解 [\u0026ldquo;1\u0026rdquo;]\nDelta：用于保存资源消费类型的资源对象存储 FIFO：一个字符串队列 其中Deltas的键值对，其源代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 // Deltas is a list of one or more \u0026#39;Delta\u0026#39;s to an individual object. // The oldest delta is at index 0, the newest delta is the last one. type Deltas []Delta // Delta is the type stored by a DeltaFIFO. It tells you what change // happened, and the object\u0026#39;s state after* that change. // // [*] Unless the change is a deletion, and then you\u0026#39;ll get the final // state of the object before it was deleted. type Delta struct { Type DeltaType Object interface{} } DeltaType 就是 Delta 的类型，有 Added、Updated、Deleted、Replaced、Sync 这么几种，其作用是表示Kuberenets资源对象发生了何种变化。\nKubernetes Informer (举报人) - DeltaFIFO Queue 篇 · 风与云原生 (crazytaxii.com)\n","date":"May 19","permalink":"/post/k8s-source-code-informer-deltafifo/","tags":null,"title":"Informer Deltafifo 源码解读"},{"categories":null,"contents":"\r前言\r在云计算领域中，对于有服务器管理模式有一个生动的比喻来表示：宠物（Pets）和牲畜（Cattle）。\n宠物。我们拥有一只宠物，如猫狗，为其取名字，精心饲养并在宠物生病为其治疗，保障它的健康，如果宠物死去后会伤心。 牲畜。在农场中饲养的奶牛、肉猪，通常会有很多只，我们不会为其取名字，在它死去后也不会伤心，只会用另一只来取代它。 在云计算领域中，「宠物」通常代指的不可或缺的系统或者是独特的系统。这些系统通常由运维人员手动构建和维护；而「牲畜」通常是指通过自动化工具而构建的服务器集群，在一开始就考虑到了故障，没有哪一个服务器是不可替代的。\nK8s\rK8s中的Deployment的设计就是通过对多个Pod\nK8s中引入了Pets Set「现改名为StatufulSet」\n学习与教育\r工作\rYou are not machines，You are not cattle，You are men.\nCharlie Chaplin, “The Great Dictator”\nhttps://mp.weixin.qq.com/s/BIjyP3T9NBhm7vp6CG4G1A\nhttps://xie.infoq.cn/article/dcc6117de96edc5239a44c3aa\nhttp://cloudscaling.com/blog/cloud-computing/the-history-of-pets-vs-cattle/\nhttps://iamondemand.com/blog/devops-concepts-pets-vs-cattle/\nhttps://www.hava.io/blog/cattle-vs-pets-devops-explained\n","date":"May 19","permalink":"/post/pets-and-cattle/","tags":null,"title":"宠物和牲畜带来的思考"},{"categories":null,"contents":"在计算机系统的监控中，采集指标通常有两种方式：\nPush Pull Push 是数据产生端由事件驱动，主动向采集端发送指标数据，与之相对应的 Pull 是由采集端定时拉取数据。 作为目前云原生监控中扛把子的 Prometus 采集数据采用了 Pull 模式，虽然在官方文档 FAQ 中给出了理由：\n可以在笔记本上监控开发时产生的变更 如果监控目标宕机了可以更容易被发现 可以通过 web 浏览器手工访问监控目标并检查其健康状况 但是这些不能说明 Pull 模式的优点，在前段时间在推特上看到了一个关于 Prometheus 采用 Pull 模式的Twitter讨论，为此本文\nPrometheus 的设计理念\rPrometheus 的 slogan 是「metrics to insight」，意思是它仅仅关心标准化地采集给定指标的当前状态，而不是导致这些指标的底层事件，所以其不是基于事件的监控系统。\n例如，计量服务不会发送关于每个 HTTP 请求的消息给 Prometheus 服务器，而是在内存中简单地累加这些请求。每秒可能会发生成百上千次这种累加而不会产生任何监控流量。Prometheus 然后每隔 15 或 30 秒简单地问一下这个服务实例当前状态的累积值而已。监控结果的传输量很小，拉取模式也不会产生问题。\n如果是基于事件的监控系统，需要在每一个事件「HTTP 请求、异常」发生时立即向监控服务器报告，监控服务器可以汇聚事件为指标或保存事件用于后续处理，例如ELK。\n监控目标的配置更少\r采用 Pull 模式，不用知道监控目标中的具体信息，也不用在监控目标不用维护指标推送的服务，这些工作都由数据采集端统一管理，而采用 Push 模式那么就需要更多的资源。\n因此，采用 Pull 模式的业务开发中，只需要保证自己服务的数据能够被采集到，采集出错或异常由采集端统一处理。这样对于监控目标的应用开发来说会更简单。\nPush 模式会要求更多的配置，采集端要知道监控目标，监控目标还要知道数据采集服务器，同时还需要在应用端编写错误处理、连接建立等代码，这大大增加了监控目标的负担。\n掌握主动权\r无论哪种模式，如果发送给时序数据库的数据量超过它的处理能力都会导致服务器宕机。但是存在的区别是， Push 模式通常会由业务开发人员在业务逻辑中编写，由于其水平参差不齐，代码编写存在着问题将会造成对监控服务造成巨大的负载；而监控团队通常就一个 Team，通常是对监控系统的熟悉程度更高，代码质量相对可控，因此 Pull 模式能够将这一部分风险降低。\n更好控制数据粒度\rpull 模式能够有更好的控制数据的粒度，不管是画图，还是做算法分析，数据预处理的过程都会比较简单\nPull 模式的缺点\r当然采用 Pull 也会带来一些问题：\n如果监控对于实时要求很高的服务，这种系统拉取确实会导致问题，计量服务必须在拉取的间隔中间缓存事件，拉取的频率也要非常高才能接近推送模式的效果。 当应用服务或监控目标的网络不可达，例如如 IoT 环境，Pull 模式几乎不可能。这个时候就需要采取 pushgateway 的方式 如果必需要使用 Push 模式，Prometheus 提供了 Pushgateway的方式，但实际上 pushgateway 和 prometheus 之间依然是 pull 模式。\n总结\rPrometheus 官方并没有对选择 Pull 的方式的原理进行详细说明，但是显然，Prometheus的设计理念就决定了其必定采用 Pull 的模式，这奠定了相比于Zabbix、 Nagios更加的易用。\nReference\rhttps://prometheus.io/docs/introduction/faq/#why-do-you-pull-rather-than-push https://prometheus.io/blog/2016/07/23/pull-does-not-scale-or-does-it/ https://prometheus.io/docs/instrumenting/pushing/ https://twitter.com/_a_wing/status/1512451830814437385 转载申请\r本作品采用知识共享署名 4.0 国际许可协议进行许可，转载时请注明原文链接，图片在使用时请保留全部内容，可适当缩放并在引用处附上图片所在的文章链接。\n","date":"May 19","permalink":"/post/why-promethus-using-pull/","tags":null,"title":"为什么 Promethus 采用了 Pull 模式？"},{"categories":null,"contents":"\r前言\r时间线\r收获Offer\r","date":"Apr 26","permalink":"/post/my-campus-offer-record/","tags":null,"title":"我的校招总结"},{"categories":null,"contents":"","date":"Jan 01","permalink":"/about/","tags":null,"title":"About"},{"categories":null,"contents":"","date":"Jan 01","permalink":"/articles/","tags":null,"title":"Articles"}]