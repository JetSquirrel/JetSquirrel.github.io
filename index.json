[{"categories":null,"contents":"这是我的七月份第二周的个人周报，时间范围是 2022-07-18 到 2022-07-24，主要记录了工作 / 学习 / 生活上的事情。\n鸽了一周\r上周鸽了一次周报，其实上周末有写周报，只是内容涉及到公司封培和个人的一些事情，所以没有发布。\n工作 / 代码 / 计算机\r工作 OKR \u0026amp; RoadMap 制定\r下半年工作的「OKR」和 「RoadMap」 在这周制定下来，这决定了我下半年工作上大致方向。有一些工作是以前有所了解，但大多数对我而言还是挺有挑战性。 同时，我也在思考如何胜任这一份工作，胜任做为一个 SRE ，无论是「硬技能」还是「软技能」都有很多地方需要去学习。\n个人 OKR\r除了工作上的 OKR，我也给自己制定了一份 OKR： O1：自我提升\nKR1: 每周运动健身不少于两次（30 min） KR2: 读完 Google SRE 系列书 KR3: 阅读开源项目的源码每周累计时长不少于「2H」 O2：个人影响力输出\nKR1：BiliBili 的粉丝达到 「1000」（目前 243） KR2: 输出高质量文章「3」篇 KR3：参与开源项目，提交 PR 不少于「5 个」 获得了 KubeSphere 的 Contributor 证书\r之前给 Fluent-Opreator 提交了一个 PR，这周 KS 社区为 Contributor 制定了证书，其中也包括了我。 说来惭愧，当时只提交了一个非常简单的插件，而且还是在 wenchajun 的帮助下完成。后续也有接 Issue，不过由于工作后没有时间和精力参与，导致一直没能完成承接的任务，幸好这个 Issue 被其他的 Contributor 完成了了。\n✍️ 学习\r读书\r这周看了两本书：\nGoogle SRE 工作手册：更多讲 SRE 实践的一本书，里面有许多 Google 在实践中所总结的经验，许多实践方法都可以在工作拿来用。 MySQL 必知必会：快速上手 MySQL 必读。因为工作要用到 SQL，而我对于这方面不是很熟悉，所以选择读一读这本书来补齐短板。 另外，还看了一些文档：\nVim Cheet Sheet Sanic 框架的文档 生活\r购置物件\r购置了一些生活必需的物件，包括：\n冰箱 电动车 厨具 下周就可以在家中做饭了。\n居家办公的一天\r因为周五因为公司周围出现了疫情，不得不居家办公，由于我没有带回工作电脑，所以只能拿 Surface 办公，由于性能太差了，开个腾讯会议都感觉好卡。 下午公司解除了封锁，所以又回到了公司工作了一段时间。\n","date":"Jul 25","permalink":"/post/2022-07-3rd-week/","tags":null,"title":"2022年7月第三周 | OKR \u0026 购置物件"},{"categories":null,"contents":"这是我的七月份第一周的周报，时间范围是 2022-06-27 到 2022-07-03，主要记录了工作 / 学习 / 生活上的事情。\n💻 工作 / 代码 / 计算机\r了解业务 \u0026amp; 接手项目\r在公司的工作上，这周完成新人培训在线课程的学习，并且开始了解业务相关的资料和接触项目。\n开源项目没有花太多时间\r之前接手的 fluent-operator，这周也没有花太多时间去做。周内因为刚刚搬家还有很多事情要做，周末就在家躺尸，完全不想干活。之后还是的得调整自己时间安排，合理安排一定的时间在开源项目上。\n✍️ 学习\r读书\r这周没怎么看书，只读了一本书的 Introduction 部分。\n《性能之巅》（ Systems Performace ） ：这本书是衡量系统性能的百科收藏，作者是一位经验丰富的性能工程师，著有《性能之巅》、《BPF 之巅》等可观测领域的书籍 以前收集很多电子书籍，但是都存在硬盘里没有阅读，这周进行了整理，挑出了一些以后需要学习内容：\n🔭 可观测性 《性能之巅》（ Systems Perfemance ） 《BPF 之巅》（ BPF Performance Tools ） Logging in Action ☁️ 云原生 Kubernets Security an Observability Networking and Kuberenets Kuberentes Operator Kubernentes Patterns Container Security 🤔 其它 《大教堂与集市》 《SRE：Google 运维解密》 对应的 PDF 已经上传到网盘，点击「链接」获取。\n个人知识管理\r继续学习了 Tiago Forte 的 Second Brain 相关内容，并对之前的 P.A.R.A进行了扩展。 知识管理采用了两套方案，个人笔记是「滴答清单」+「思源笔记」进行管理，工作笔记采用「腾讯文档」进行管理。\n🍚 生活\r免费早晚餐\r上周住在酒店一直不知道会提供免费的早餐，这周前三天就在酒店的吃了早餐。酒店提供的早餐可以选择的对我来所说丰富啦。当我去公司食堂吃早饭时才发现更加的丰富，而且还都是免费。晚餐也是免费，只是吃起来不太符合我这个四川人的口味。 午饭有时在食堂吃，有时和同事去外面吃，开销相对于上学那会儿确实多了不少。\n搬到新家\r这周搬到了新租的公寓，位于景区「南头古城」中，平时还有游客来这边参观，周围有很多商超买东西也很方便，最重要的是步行到公司大概 20 多分钟。\n邻居\r强哥是我的研究生同班同学，现在我们不仅入职了同一家公司，还成了上下楼的邻居。\n偶尔运动\r这周的运动量减少了许多，一是因为需要忙搬家的事情，二是自己太懒了。运动的内容主要是：\n卡波耶拉：基础热身训练，Ginga 练习 核心力量训练：10分钟核心力量训练 台风「暹芭」登陆\r这周台风「暹芭」登陆，深圳这边的风吹得很大，周末因为下着暴雨一直宅在家中。这次的台风似乎强度不是很大，影响较小。\nAuthor: JetSquirrel LastMod: 2022-07-03 License CC BY-NC-ND 4.0\n","date":"Jul 03","permalink":"/post/2022-07-1st-week/","tags":null,"title":"2022年7月第一周 | 步入正轨"},{"categories":null,"contents":"这是我的第一份周报，时间范围是 2022-6-20 到 2022-6-26，会记录工作 / 学习 / 生活上的事情。\n💻工作 / 代码 / 计算机\rfluent-operator 的 Fluentd Loki 插件开发\r这周我又接下了开源项目 fluent-operator 的 Fluentd Loki 插件开发 issue，本以为有了上次提交 OpenSearch 插件经验会完成的更加顺畅，今天上手后才发现还是有很多问题需要进行解决，这对我来说会是一个很大的挑战。\nGolang 代码规范\r周五学习了 Golang 的代码规范，发现平时自己在写 Golang 的时候有些地方不符合规范，以后得多多留意。另外，我发现关注的开源项目 fluent-operator 和 siyuan-note 中，有些代码不符合 Golang 规范，以后可以在这些地方水一水 PR。\n✍️学习\r读书\r这周读了三本书：\nGoogle SRE 运维解密：讲解 SRE 这个工作岗位的由来以及在 Google 中的实践经验，目前看到了第六章 「分布式系统的监控」 教堂与集市：讲解开源文化，目前看到了第二章「教堂与集市」 Build Your Second Brain：由于是全英文，目前只看了 Introduction，但是通过相关解读这本书的中文博客和视频学习到了「P.A.R.A」知识管理方法 我的阅读软件采用了「思源笔记」，双链标注 PDF 的方式是真的好用，非常适合整理读书笔记 P.A.R.A\rP.A.R.A 是 Tiago Forte 发明的项目管理方法，其中\n项目（Project）：具有明确目标以及时间范围，是最小执行单位 领域（Area）：长期需要关注的领域（带责任） 资源（Resource）：感兴趣的事情（非责任） 归档（Archive）：沉寂的内容，但也许对未来有用 笔记工具采用的是「思源笔记」，目前已经将以前的笔记转化为 P.A.R.A 方式。 🍚生活\r开始运动\r这周开始在家运动，主要是跟着 B 站上的视频训练，主要运动内容是：\n卡波耶拉基础 核心力量训练 以前很少运动，工作后的保持良好的运动习惯。「每天运动半小时，健康工作五十年」 离开家 / 到达深圳\r由于工作原因，我离开成都到了深圳。到外地工作打乱了我最初的安排，对于离开离开小秋和爸妈也非常不舍，但这是我综合各方面后最好的选择， 到深圳后，这几天一直在看房，今天终于定下来了。这边防疫政策严格，每天都得捅喉咙做核酸，保证有24小时核酸码。另外，果然如网上所属，有着深圳有好多湘菜馆、隆江猪脚饭。\n入职鹅厂 / 生日\r这周五正式入职鹅厂🐧，同时，入职这天也刚好是我的生日。选择入职日期并没有没有刻意安排，事后才发觉。这我而言也是一个非常重要的「仪式」吧，即意味着我长大了一岁，也表示我身上的责任更多了。 刚入职的工作主要是安装办公环境、看文档、熟悉产品，新同事非常 Nice，晚饭过后同事给我生日，还吃到 mentor 订的生日蛋糕，非常感谢大家。\nMac 真香\r用上了公司发的 Mac，苹果的用户体验果然名不虚传，用来开发和写文档非常舒服，由于是第一次使用还在适应中。 上一台电脑是 Surface，我用它上面写论文、写笔记、看视频、绘图、玩游戏、跑深度强化学习，终于，现在它不用再承受它不该承受的负担了。\nAuthor: JetSquirrel LastMod: 2022-06-27 License CC BY-NC-ND 4.0 本文格式参考了 STRRL\n","date":"Jun 27","permalink":"/post/2022-06-4th-week/","tags":null,"title":"2022年6月第四周"},{"categories":null,"contents":"在 Informer开始运行时，Reflector 对象的 store 字段被设置为了 DeltaFIFO 队列对象\nDeltaFIFO的结构定义的源代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 type DeltaFIFO struct { // lock/cond protects access to \u0026#39;items\u0026#39; and \u0026#39;queue\u0026#39;. lock sync.RWMutex cond sync.Cond // We depend on the property that items in the set are in // the queue and vice versa, and that all Deltas in this // map have at least one Delta. items map[string]Deltas queue []string // a lot of code here } DeltaFIFO可以本\n可以看到 \u0026ldquo;DeltaFIFO\u0026rdquo;可以拆分开分为两个部分来理解 [\u0026ldquo;1\u0026rdquo;]\nDelta：用于保存资源消费类型的资源对象存储 FIFO：一个字符串队列 其中Deltas的键值对，其源代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 // Deltas is a list of one or more \u0026#39;Delta\u0026#39;s to an individual object. // The oldest delta is at index 0, the newest delta is the last one. type Deltas []Delta // Delta is the type stored by a DeltaFIFO. It tells you what change // happened, and the object\u0026#39;s state after* that change. // // [*] Unless the change is a deletion, and then you\u0026#39;ll get the final // state of the object before it was deleted. type Delta struct { Type DeltaType Object interface{} } DeltaType 就是 Delta 的类型，有 Added、Updated、Deleted、Replaced、Sync 这么几种，其作用是表示Kuberenets资源对象发生了何种变化。\nKubernetes Informer (举报人) - DeltaFIFO Queue 篇 · 风与云原生 (crazytaxii.com)\n","date":"May 19","permalink":"/post/k8s-source-code-informer-deltafifo/","tags":null,"title":"Informer Deltafifo 源码解读"},{"categories":null,"contents":"在计算机系统的监控中，采集指标通常有两种方式：\nPush Pull Push 是数据产生端由事件驱动，主动向采集端发送指标数据，与之相对应的 Pull 是由采集端定时拉取数据。 作为目前云原生监控中扛把子的 Prometus 采集数据采用了 Pull 模式，虽然在官方文档 FAQ 中给出了理由：\n可以在笔记本上监控开发时产生的变更 如果监控目标宕机了可以更容易被发现 可以通过 web 浏览器手工访问监控目标并检查其健康状况 但是这些不能说明 Pull 模式的优点，在前段时间在推特上看到了一个关于 Prometheus 采用 Pull 模式的Twitter讨论，为此本文\nPrometheus 的设计理念\rPrometheus 的 slogan 是「metrics to insight」，意思是它仅仅关心标准化地采集给定指标的当前状态，而不是导致这些指标的底层事件，所以其不是基于事件的监控系统。\n例如，计量服务不会发送关于每个 HTTP 请求的消息给 Prometheus 服务器，而是在内存中简单地累加这些请求。每秒可能会发生成百上千次这种累加而不会产生任何监控流量。Prometheus 然后每隔 15 或 30 秒简单地问一下这个服务实例当前状态的累积值而已。监控结果的传输量很小，拉取模式也不会产生问题。\n如果是基于事件的监控系统，需要在每一个事件「HTTP 请求、异常」发生时立即向监控服务器报告，监控服务器可以汇聚事件为指标或保存事件用于后续处理，例如ELK。\n监控目标的配置更少\r采用 Pull 模式，不用知道监控目标中的具体信息，也不用在监控目标不用维护指标推送的服务，这些工作都由数据采集端统一管理，而采用 Push 模式那么就需要更多的资源。\n因此，采用 Pull 模式的业务开发中，只需要保证自己服务的数据能够被采集到，采集出错或异常由采集端统一处理。这样对于监控目标的应用开发来说会更简单。\nPush 模式会要求更多的配置，采集端要知道监控目标，监控目标还要知道数据采集服务器，同时还需要在应用端编写错误处理、连接建立等代码，这大大增加了监控目标的负担。\n掌握主动权\r无论哪种模式，如果发送给时序数据库的数据量超过它的处理能力都会导致服务器宕机。但是存在的区别是， Push 模式通常会由业务开发人员在业务逻辑中编写，由于其水平参差不齐，代码编写存在着问题将会造成对监控服务造成巨大的负载；而监控团队通常就一个 Team，通常是对监控系统的熟悉程度更高，代码质量相对可控，因此 Pull 模式能够将这一部分风险降低。\n更好控制数据粒度\rpull 模式能够有更好的控制数据的粒度，不管是画图，还是做算法分析，数据预处理的过程都会比较简单\nPull 模式的缺点\r当然采用 Pull 也会带来一些问题：\n如果监控对于实时要求很高的服务，这种系统拉取确实会导致问题，计量服务必须在拉取的间隔中间缓存事件，拉取的频率也要非常高才能接近推送模式的效果。 当应用服务或监控目标的网络不可达，例如如 IoT 环境，Pull 模式几乎不可能。这个时候就需要采取 pushgateway 的方式 如果必需要使用 Push 模式，Prometheus 提供了 Pushgateway的方式，但实际上 pushgateway 和 prometheus 之间依然是 pull 模式。\n总结\rPrometheus 官方并没有对选择 Pull 的方式的原理进行详细说明，但是显然，Prometheus的设计理念就决定了其必定采用 Pull 的模式，这奠定了相比于Zabbix、 Nagios更加的易用。\nReference\rhttps://prometheus.io/docs/introduction/faq/#why-do-you-pull-rather-than-push https://prometheus.io/blog/2016/07/23/pull-does-not-scale-or-does-it/ https://prometheus.io/docs/instrumenting/pushing/ https://twitter.com/_a_wing/status/1512451830814437385 转载申请\r本作品采用知识共享署名 4.0 国际许可协议进行许可，转载时请注明原文链接，图片在使用时请保留全部内容，可适当缩放并在引用处附上图片所在的文章链接。\n","date":"May 19","permalink":"/post/why-promethus-using-pull/","tags":null,"title":"为什么 Promethus 采用了 Pull 模式？"},{"categories":null,"contents":"","date":"Jan 01","permalink":"/about/","tags":null,"title":"About"},{"categories":null,"contents":"","date":"Jan 01","permalink":"/articles/","tags":null,"title":"Articles"}]