<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jett Deng</title>
    <link>/post/</link>
    <description>Recent content in Posts on Jett Deng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 08 Jun 2022 22:21:33 +0800</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Test</title>
      <link>/post/test/</link>
      <pubDate>Wed, 08 Jun 2022 22:21:33 +0800</pubDate>
      
      <guid>/post/test/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Informer Deltafifo 源码解读</title>
      <link>/post/k8s-source-code-informer-deltafifo/</link>
      <pubDate>Thu, 19 May 2022 22:16:06 +0800</pubDate>
      
      <guid>/post/k8s-source-code-informer-deltafifo/</guid>
      <description>在 Informer开始运行时，Reflector 对象的 store 字段被设置为了 DeltaFIFO 队列对象
DeltaFIFO的结构定义的源代码如下：
1 2 3 4 5 6 7 8 9 10 11 12 13  type DeltaFIFO struct { // lock/cond protects access to &amp;#39;items&amp;#39; and &amp;#39;queue&amp;#39;.  lock sync.RWMutex cond sync.Cond // We depend on the property that items in the set are in  // the queue and vice versa, and that all Deltas in this  // map have at least one Delta.</description>
    </item>
    
    <item>
      <title>宠物和牲畜带来的思考</title>
      <link>/post/pets-and-cattle/</link>
      <pubDate>Thu, 19 May 2022 12:03:55 +0800</pubDate>
      
      <guid>/post/pets-and-cattle/</guid>
      <description></description>
    </item>
    
    <item>
      <title>为什么 Promethus 采用了 Pull 模式？</title>
      <link>/post/why-promethus-using-pull/</link>
      <pubDate>Thu, 19 May 2022 12:02:44 +0800</pubDate>
      
      <guid>/post/why-promethus-using-pull/</guid>
      <description>在数据监控领域，数据采集端获取到监控目标的数据通常有 Push 和 Pull 两种方案，其中 Push 是由数据产生端根据事件驱动主动向采集端发送数据，而 Pull 是由采集端定时拉取数据。
作为目前云原生监控中扛把子的 Prometus 采集数据采用了 Pull 模式，虽然在官方文档 FAQ](https://prometheus.io/docs/introduction/faq/#why-do-you-pull-rather-than-push) 中给出了理由：
 可以在笔记本上监控开发时产生的变更 如果监控目标宕机了可以更容易被发现 可以通过 web 浏览器手工访问监控目标并检查其健康状况  但是这些不能说明 Pull 模式的优点，在前段时间在推特上看到了一个关于 Prometheus 采用 Pull 的Twitter (推特) (推特) (推特) (推特) (推特) (推特) 讨论，经过结合官方博客的内容我对其进行了总结
Prometheus 的设计理念Prometheus 的 slogan (口号) (口号) (口号) (口号) (口号) 是「From metrics (公制) (公制) (公制) (公制) (公制) to insight」，它仅仅关心标准化地采集给定指标的当前状态，而不是导致这些指标的底层事件，所以其不是基于事件的监控系统。
例如，计量服务不会发送关于每个 HTTP 请求的消息给 Prometheus 服务器，而是在内存中简单地累加这些请求。每秒可能会发生成百上千次这种累加而不会产生任何监控流量。Prometheus 然后每隔 15 或 30 秒简单地问一下这个服务实例当前状态的累积值而已。监控结果的传输量很小，拉取模式也不会产生问题。</description>
    </item>
    
    <item>
      <title>我的校招总结</title>
      <link>/post/my-campus-offer-record/</link>
      <pubDate>Tue, 26 Apr 2022 15:30:27 +0800</pubDate>
      
      <guid>/post/my-campus-offer-record/</guid>
      <description>前言时间线收获Offer</description>
    </item>
    
  </channel>
</rss>
