<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 喷气松鼠</title>
    <link>/post/</link>
    <description>Recent content in Posts on 喷气松鼠</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 04 Sep 2022 21:58:40 +0800</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2022年第35周</title>
      <link>/post/2022-35th-weekly/</link>
      <pubDate>Sun, 04 Sep 2022 21:58:40 +0800</pubDate>
      
      <guid>/post/2022-35th-weekly/</guid>
      <description>前言周报已经鸽了好几周，感觉自己没有时间和尽力去写，这周看了几个博主的周报深受启发，于是重新开始写。
关注了什么博客二丫讲梵 ：分享了很多运维知识，可谓是一个百宝箱；该博主每周都有分享自己的学习周报，很是受用 六个周：周报博主，每周的周报质量很高，是我学习的目标 骏马金龙：主要是分享了一些运维工具教程。博主由于不是计算机专业科班出身，甚至作为一个外行人学习计算机的艰辛之处，所以写的教程非常详细易懂 南风意未起：分享了一些监控领域的工具和源码阅读笔记 视频总是胡思乱想停不下来？10分钟讲清精神内耗的本质，告别过度思考：Up主分享了自己受到「精神内耗」折磨的尽力和自己如何去摆脱内心的另一个「我」。我自己身上也有这个问题，总是在自己进行内耗，这个视频对我很是启发。 异世界归来舅舅 第七集：在追的一个番，挺有意思 时局成都核酸系统崩溃由于成都最近疫情比较严重，所以也要进行全员核酸，但是不幸的是核酸系统被打崩了。作为一个有着 2000 万人口的城市，受到的影响面非常的大，大家冒雨排队几小时，结果被告知做不了核酸，而排队的过程中也增加了被感染的风险。
原因是由于东软在9月2日新上了一个核酸检测系统，据传他们用了MySQL单表来存几亿条数据，导致性能严重不足。网上传了很多医护人员举着手机找信号和核酸漫长排队人群的照片，很是令人心酸。
我的工作就是作为保障软件系统的稳定性 SRE，深知软件系统稳定的重要性。东软却如此儿戏般的对待影响到千万民众生活的核酸系统，而且这已经是东软第三次发生这样的大面积系统崩溃事件。
生活吃了什么椒盐排骨 玉米排骨汤 地三鲜&amp;amp;干锅鸡 长沙臭豆腐 东北饺子 静默在家的周末深圳的疫情政策就是周一至周五上班，周末封两天。幸好小区里面超市、饭店都有，就是整个周末都在家都没有机会出去走走，令人不爽的一点就是感觉什么都没有做马上就要到周一啦。
学习&amp;amp;编程买书这周京东图书活动，于是买了三本书：
SRE 运维之道 性能之巅 第二版 运维困境与 DevOps 破解之道 工作后最大的感受就是没有太多的时间和精力去读书，这种状态非常的不好，不学习可是不行的，得调整状态把之前刷手机和娱乐视频得时间花在正事上。
周末看了《SRE 运维之道》，与其说是一本书更像是关于 SRE 的博客、文章、访谈记录、教程的合集。之前 Mentor 跟我聊过，说我距离一个合格 SRE 还欠缺一些东西，阅读这本书的几章后，我的感触更加的深刻，也认识到自己不论是技术还是在软技能上还有很长的路要走。</description>
    </item>
    
    <item>
      <title>2022年8月第一周 | 八月，你好</title>
      <link>/post/2022-08-1st-weekly/</link>
      <pubDate>Mon, 08 Aug 2022 09:22:00 +0800</pubDate>
      
      <guid>/post/2022-08-1st-weekly/</guid>
      <description>这是我的七月份第四周的个人周报，时间范围是 2022-08-02 到 2022-08-08，主要记录了工作 / 学习 / 生活上的事情。
💻 工作 / 代码 / 计算机与数据库打交道工作上的事情按理说并不是太难，目前存在的问题在于我自己的一些知识储备不够，对于 ELK 和 MySQL 的掌握程度还不够，特别是写 SQL 语句花了很长的时间。由于在学校的时候与数据库打交道的时间较少，现在我作为一个 SRE，尤其是与监控系统打交道的 SRE，未来要增加在数据库领域的学习。
✍️ 学习这周末有在家学习，主要有
视频学习Kubesphere Live Kubernetes 控制器原理简介: 驭势科技的张晓濛博士对 Kubernetes 的核心组件 Controller（控制器）进行深入的介绍，非常高质量的视频，强烈推荐，已经是「三刷」了，每一次学完都有新的收获。 新一代高可用 MySQL K8s Operator 源码解析： 介绍高可用 RadonDB MySQL 容器化项目。从该项目的 operator 工程脚手架选型，CRD 、 controller ，sidecar 几个视角展开源码解析。 Tech Nana 系列视频 k8s Operator simply explained in 10-mins Setup Prometheus Monitoring on Kubernetes using Helm and Promethus Operator 如何入门 devops 文档资料学习kubebuilder 文档：复习 kubebuilder 如何构建一个 operator Inside of Kubernetes Controller PPT ： 张晓濛博士讲解控制器所用的 PPT，在思源笔记上配合「Kubernetes 控制器原理简介」视频做了一些笔记 🍚 生活吃了什么周四 在家附近吃了湘菜，非常喜欢 周五 在公司食堂吃的番茄鸡蛋拌面，便宜量大又好吃 周六 在家做了三文鱼健身餐 周日 做了咖喱牛腩，晚上吃了海鲜烧烤 电瓶车充电的忐忑之路这周电瓶车没电了，但是不知道在哪儿能够找到。后来想到在支付宝上搜索充电桩，发现在家附近就有充电桩。然后跟着缺德导航结果走进了死胡同，好不容易找到后充电桩旁边停满了电动单车，结果只能去找买电动车的店家去充电。</description>
    </item>
    
    <item>
      <title>2022年7月第四周｜热爱生活的人</title>
      <link>/post/2022-07-4th-weekly/</link>
      <pubDate>Sun, 31 Jul 2022 22:36:39 +0800</pubDate>
      
      <guid>/post/2022-07-4th-weekly/</guid>
      <description>这是我的七月份第四周的个人周报，时间范围是 2022-07-25 到 2022-08-01，主要记录了工作 / 学习 / 生活上的事情。
💻 工作 / 代码 / 计算机居家办公这周有三天是居家办公，将远程办公做为终极目标的我是一个非常重要的体验。
居家办公远不如想象中的那么美好，虽然节省掉了通勤的时间，但也带来了很多问题。
首先是家中的办公条件有限，桌子和椅子的高度不合适，坐久了容易腰疼。同时也没有了外接显示器，由于没有带鼠标回家，还破大费买了一个苹果的触摸板。在家的生活成本更高。没有了免费的早午餐，点外卖也是一笔不小的开销，在家一直开着空调是的电费开销也提升了。
其次，由于线上办公带来了沟通成本的上升，导致了工作推进非常的艰难。我认为要做到远程办公首先清楚自己要做什么，并且拥有着非常强的个人能力，很显然，我目前不能够胜任。另外，技术驱动型的工作可能更适合远程工作，业务驱动的工作还做不到。
最后，对于我而言远程上班最大的问题在于 &amp;ndash; 模糊了工作和生活的界限。在公司的时候中午和下午会离开工位吃饭，下班后会通勤回到家中，虽然有时会背着电脑回家继续工作，但是回家后是非常清楚自己是在加班，工作和生活之间还是有着一条界限。而居家办公的时候一整天待在屋子里，大部分时间都坐在房间桌子旁敲击键盘，由于没了下班的界线，自己不知不觉会工作到很晚。
Ruby 初体验使用了 Ruby 脚本来处理日志数据，使用体验类似于 Python，就是感觉语法糖用着比较奇怪。
写文章周日在家写了两篇文章，
为什么我要写周报（已完成） 2022 年的你，选择了哪一款笔记软件？（未完成） 一天的时间只完成了一篇文章，并且文章还有很多的错别字和病句。我的写作速度和质量都有待提升。 ✍️ 学习这周没怎么学习新知识。
🍚 生活在家做饭周末尝试在家做饭，周六去超市买了一大块牛腩。周日在家做了「番茄牛腩意面」和「咖喱牛腩」。
「番茄牛腩意面」做的有点难吃，买的意面酱太酸了，有点吃不惯 「咖喱牛腩」是跟着做菜 App 做的，光炖牛腩就花了一个小时，完成菜品都到晚上九点多了。「咖喱牛腩」搭配上「五常大米」是真的好吃，比外卖好吃多了，不枉我花费了这么多的时间去做菜。 一个关注的周报博主建立一个周报索引网站，收录了一些写周报博主的博客，其中网站的署名是「❤️ 热爱生活的人」，希望我也成为一个热爱生活的人​。</description>
    </item>
    
    <item>
      <title>为什么我要写个人周报？</title>
      <link>/post/why-write-weekly/</link>
      <pubDate>Sun, 31 Jul 2022 22:20:08 +0800</pubDate>
      
      <guid>/post/why-write-weekly/</guid>
      <description>从上个月开始，我每周都会写一篇个人周报，并在将其发表到个人网站和微信公众号平台。作为一个不喜欢被关注，也很少在互联网发声的人，驱动我写周报的原因有以下几点：
写作练习 自我对话 个人影响力建设 一周一次的个人周报其实给自己定下了一个明确的目标，即使只是「流水账」，相信长时间坚持会带来回报。
1. 写作练习为什么要写个人周报？
最大原因是我写作差，难以把自己的所思所想通过文字表达出来，同时写出来句子还狗屁不通。
我在写硕士毕业论文可以说是非常的煎熬，写作水平成了拦路虎。毕业论文改了又改，来来回回的不知道修改了多少次，幸好导师没有放弃我，论文经过无数的修改意见下才勉强完成。
正是因为发现了自己的不足，真真切切经历了「痛感」才想要改变。
从那时开始，我就定下提高自己的写作水平的目标。我开始读过一些与写作相关的书籍，也尝试写文章，但还是发现困难重重，究其原因，应该是我的练写太少。个人周报提供了每周一次写作练习机会，同时也保证了有写作的内容。
2. 自我对话写作即是和自己对话，在《卡片笔记写作法》[1]中，有这么一个观点:
写作的本身就是对于思考的记录，而非思考的结果。
每周在固定的时间对做过的事进行回顾，伴随着思考将发生的事情记录下来。在写周报的时候是与自己对话的一个过程，回顾这周自己做了什么，做了什么有成就的事情，以及有什么地方还可以做的更好。
周报带来的另一个好处在于，通过将自己的思考结果保存下，避免重复思考，远离了「精神内耗」。
3. 个人影响力建设在社交网站上关注一些计算机领域的博主 [2]，他们每周会发一次个人周报，其中的内容是工作和生活中发生的事，因此我也跟风加入到周报的行列中 。
另外一个原因在于我关注了一位 Golang 和 K8s 的大佬 draveness[3]，他博客中有着许多高质量的文章，甚至前段时间还出了一本书《Golang 语言设计实现》。翻到他时间线从刚写博客的 2015 年到现在，可以看出文章质量也不是一蹴而就，而是在不断的写作中慢慢得到提升。
作为一个程序员，35 岁危机是不可避免的一个问题。为自己在互联网上积累个人印象力是不错的一个方式。周报对我而言只是第一步，还有更多的东西值得我尝试：写博客、做视频、给开源项目贡献代码&amp;hellip;&amp;hellip;
总结最后，我想说一说工作周报和个人周报的区别，我认为区别最大之处在于「责任」。
工作周报：带有责任，是对自己一周做的工作的总结，有着明确的目标。工作周报写的不好将会影响到绩效的考评，这往往会带来痛苦。 个人周报：不带责任，想怎么写就怎么写，格式和内容都没有限制，即使是不写也不会产生任何的后果，完全是自我驱动。这样在周报的创作和分享过程中还会带给自己成就感。 个人周报就是对生活的记录，希望大家都能够成为成为「热爱生活的人」。
[1] https://book.douban.com/subject/35503571/ [2] https://draveness.me/ [3] www.cool-weekly.com</description>
    </item>
    
    <item>
      <title>2022年7月第三周 | OKR &amp; 购置物件</title>
      <link>/post/2022-07-3rd-weekly/</link>
      <pubDate>Mon, 25 Jul 2022 00:32:31 +0800</pubDate>
      
      <guid>/post/2022-07-3rd-weekly/</guid>
      <description>这是我的七月份第二周的个人周报，时间范围是 2022-07-18 到 2022-07-24，主要记录了工作 / 学习 / 生活上的事情。
鸽了一周上周鸽了一次周报，其实上周末有写周报，只是内容涉及到公司封培和个人的一些事情，所以没有发布。
工作 / 代码 / 计算机工作 OKR &amp;amp; RoadMap 制定下半年工作的「OKR」和 「RoadMap」 在这周制定下来，这决定了我下半年工作上大致方向。有一些工作是以前有所了解，但大多数对我而言还是挺有挑战性。 同时，我也在思考如何胜任这一份工作，胜任做为一个 SRE ，无论是「硬技能」还是「软技能」都有很多地方需要去学习。
个人 OKR除了工作上的 OKR，我也给自己制定了一份 OKR：
O1：自我提升
KR1: 每周运动健身不少于两次（30 min） KR2: 读完 Google SRE 系列书 KR3: 阅读开源项目的源码每周累计时长不少于「2H」 O2：个人影响力输出
KR1：BiliBili 的粉丝达到 「1000」（目前 243） KR2: 输出高质量文章「3」篇 KR3：参与开源项目，提交 PR 不少于「5 个」 获得了 KubeSphere 的 Contributor 证书之前给 Fluent-Opreator 提交了一个 PR，这周 KS 社区为 Contributor 制定了证书，其中也包括了我。 说来惭愧，当时只提交了一个非常简单的插件，而且还是在 wenchajun 的帮助下完成。后续也有接 Issue，不过由于工作后没有时间和精力参与，导致一直没能完成承接的任务，幸好这个 Issue 被其他的 Contributor 完成了了。</description>
    </item>
    
    <item>
      <title>2022年7月第一周 | 步入正轨</title>
      <link>/post/2022-07-1st-weekly/</link>
      <pubDate>Sun, 03 Jul 2022 21:18:29 +0800</pubDate>
      
      <guid>/post/2022-07-1st-weekly/</guid>
      <description>这是我的七月份第一周的周报，时间范围是 2022-06-27 到 2022-07-03，主要记录了工作 / 学习 / 生活上的事情。
💻 工作 / 代码 / 计算机了解业务 &amp;amp; 接手项目在公司的工作上，这周完成新人培训在线课程的学习，并且开始了解业务相关的资料和接触项目。
开源项目没有花太多时间之前接手的 fluent-operator，这周也没有花太多时间去做。周内因为刚刚搬家还有很多事情要做，周末就在家躺尸，完全不想干活。之后还是的得调整自己时间安排，合理安排一定的时间在开源项目上。
✍️ 学习读书这周没怎么看书，只读了一本书的 Introduction 部分。
《性能之巅》（ Systems Performace ） ：这本书是衡量系统性能的百科收藏，作者是一位经验丰富的性能工程师，著有《性能之巅》、《BPF 之巅》等可观测领域的书籍 以前收集很多电子书籍，但是都存在硬盘里没有阅读，这周进行了整理，挑出了一些以后需要学习内容：
🔭 可观测性 《性能之巅》（ Systems Perfemance ） 《BPF 之巅》（ BPF Performance Tools ） Logging in Action ☁️ 云原生 Kubernets Security an Observability Networking and Kuberenets Kuberentes Operator Kubernentes Patterns Container Security 🤔 其它 《大教堂与集市》 《SRE：Google 运维解密》 对应的 PDF 已经上传到网盘，点击「链接」获取。</description>
    </item>
    
    <item>
      <title>2022年6月第四周</title>
      <link>/post/2022-06-4th-weekly/</link>
      <pubDate>Mon, 27 Jun 2022 08:18:29 +0800</pubDate>
      
      <guid>/post/2022-06-4th-weekly/</guid>
      <description>这是我的第一份周报，时间范围是 2022-6-20 到 2022-6-26，会记录工作 / 学习 / 生活上的事情。
💻工作 / 代码 / 计算机fluent-operator 的 Fluentd Loki 插件开发这周我又接下了开源项目 fluent-operator 的 Fluentd Loki 插件开发 issue，本以为有了上次提交 OpenSearch 插件经验会完成的更加顺畅，今天上手后才发现还是有很多问题需要进行解决，这对我来说会是一个很大的挑战。
Golang 代码规范周五学习了 Golang 的代码规范，发现平时自己在写 Golang 的时候有些地方不符合规范，以后得多多留意。另外，我发现关注的开源项目 fluent-operator 和 siyuan-note 中，有些代码不符合 Golang 规范，以后可以在这些地方水一水 PR。
✍️学习读书这周读了三本书：
Google SRE 运维解密：讲解 SRE 这个工作岗位的由来以及在 Google 中的实践经验，目前看到了第六章 「分布式系统的监控」 教堂与集市：讲解开源文化，目前看到了第二章「教堂与集市」 Build Your Second Brain：由于是全英文，目前只看了 Introduction，但是通过相关解读这本书的中文博客和视频学习到了「P.A.R.A」知识管理方法 我的阅读软件采用了「思源笔记」，双链标注 PDF 的方式是真的好用，非常适合整理读书笔记 P.A.R.AP.A.R.A 是 Tiago Forte 发明的项目管理方法，其中
项目（Project）：具有明确目标以及时间范围，是最小执行单位 领域（Area）：长期需要关注的领域（带责任） 资源（Resource）：感兴趣的事情（非责任） 归档（Archive）：沉寂的内容，但也许对未来有用 笔记工具采用的是「思源笔记」，目前已经将以前的笔记转化为 P.</description>
    </item>
    
    <item>
      <title>Informer Deltafifo 源码解读</title>
      <link>/post/k8s-source-code-informer-deltafifo/</link>
      <pubDate>Thu, 19 May 2022 22:16:06 +0800</pubDate>
      
      <guid>/post/k8s-source-code-informer-deltafifo/</guid>
      <description>在 Informer开始运行时，Reflector 对象的 store 字段被设置为了 DeltaFIFO 队列对象
DeltaFIFO的结构定义的源代码如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 type DeltaFIFO struct { // lock/cond protects access to &amp;#39;items&amp;#39; and &amp;#39;queue&amp;#39;. lock sync.RWMutex cond sync.Cond // We depend on the property that items in the set are in // the queue and vice versa, and that all Deltas in this // map have at least one Delta. items map[string]Deltas queue []string // a lot of code here } DeltaFIFO可以本</description>
    </item>
    
    <item>
      <title>为什么 Promethus 采用了 Pull 模式？</title>
      <link>/post/why-promethus-using-pull/</link>
      <pubDate>Thu, 19 May 2022 12:02:44 +0800</pubDate>
      
      <guid>/post/why-promethus-using-pull/</guid>
      <description>在计算机系统的监控中，采集指标通常有两种方式：
Push Pull Push 是数据产生端由事件驱动，主动向采集端发送指标数据，与之相对应的 Pull 是由采集端定时拉取数据。 作为目前云原生监控中扛把子的 Prometus 采集数据采用了 Pull 模式，虽然在官方文档 FAQ 中给出了理由：
可以在笔记本上监控开发时产生的变更 如果监控目标宕机了可以更容易被发现 可以通过 web 浏览器手工访问监控目标并检查其健康状况 但是这些不能说明 Pull 模式的优点，在前段时间在推特上看到了一个关于 Prometheus 采用 Pull 模式的Twitter讨论，为此本文
Prometheus 的设计理念Prometheus 的 slogan 是「metrics to insight」，意思是它仅仅关心标准化地采集给定指标的当前状态，而不是导致这些指标的底层事件，所以其不是基于事件的监控系统。
例如，计量服务不会发送关于每个 HTTP 请求的消息给 Prometheus 服务器，而是在内存中简单地累加这些请求。每秒可能会发生成百上千次这种累加而不会产生任何监控流量。Prometheus 然后每隔 15 或 30 秒简单地问一下这个服务实例当前状态的累积值而已。监控结果的传输量很小，拉取模式也不会产生问题。
如果是基于事件的监控系统，需要在每一个事件「HTTP 请求、异常」发生时立即向监控服务器报告，监控服务器可以汇聚事件为指标或保存事件用于后续处理，例如ELK。
监控目标的配置更少采用 Pull 模式，不用知道监控目标中的具体信息，也不用在监控目标不用维护指标推送的服务，这些工作都由数据采集端统一管理，而采用 Push 模式那么就需要更多的资源。
因此，采用 Pull 模式的业务开发中，只需要保证自己服务的数据能够被采集到，采集出错或异常由采集端统一处理。这样对于监控目标的应用开发来说会更简单。
Push 模式会要求更多的配置，采集端要知道监控目标，监控目标还要知道数据采集服务器，同时还需要在应用端编写错误处理、连接建立等代码，这大大增加了监控目标的负担。
掌握主动权无论哪种模式，如果发送给时序数据库的数据量超过它的处理能力都会导致服务器宕机。但是存在的区别是， Push 模式通常会由业务开发人员在业务逻辑中编写，由于其水平参差不齐，代码编写存在着问题将会造成对监控服务造成巨大的负载；而监控团队通常就一个 Team，通常是对监控系统的熟悉程度更高，代码质量相对可控，因此 Pull 模式能够将这一部分风险降低。
更好控制数据粒度pull 模式能够有更好的控制数据的粒度，不管是画图，还是做算法分析，数据预处理的过程都会比较简单
Pull 模式的缺点当然采用 Pull 也会带来一些问题：</description>
    </item>
    
  </channel>
</rss>
